{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["HotWallet","window","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickArticle","event","el","target","url","parentNode","getAttribute","setState","article","news","find","goToStory","open","state","rpc","then","balances","console","log","parent","document","err","URL","parse","host","replace","_this2","react_default","a","createElement","Grid","columns","divided","Row","Column","id","map","age","formatDistance","publishedAt","Date","addSuffix","key","data-url","onClick","title","className","getDomain","image","style","backgroundImage","concat","format","description","Button","size","color","React","PureComponent","Boolean","location","hostname","match","Idiot","baseUrl","get","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07d3bc26.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport URL from 'url'\nimport { Grid, Button } from 'semantic-ui-react'\nimport formatDistance from 'date-fns/formatDistance'\nimport format from 'date-fns/format'\n\nconst HotWallet = window.HotWallet\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      article: this.props.news[0]\n    }\n\n    HotWallet.rpc('getBalances').then(function (balances) {\n      console.log('balances:', balances)\n    })\n\n    try {\n      console.log('parent document:', window.parent.document)\n      console.log('Oh no! Iframe has access to parent window.')\n    } catch (err) {\n      console.log('Iframe is sandboxed.')\n    }\n\n  }\n\n  getDomain(url) {\n    return URL.parse(url).host.replace('www.', '')\n  }\n\n  onClickArticle = event => {\n    const el = event.target\n    const url = el.parentNode.getAttribute('data-url') || el.getAttribute('data-url')\n    this.setState({\n      article: this.props.news.find(article => article.url === url)\n    })\n  }\n\n  goToStory = event => {\n    const el = event.target\n    const url = el.parentNode.getAttribute('data-url') || el.getAttribute('data-url')\n    window.open(url, '_blank')\n  }\n\n  render() {\n    return (\n      <main>\n        <h1>Crypto News</h1>\n        <Grid columns={2} divided>\n          <Grid.Row>\n            <Grid.Column id=\"left-pane\">\n              {this.props.news.map(article => {\n                const age = formatDistance(article.publishedAt, new Date(), { addSuffix: true })\n                return (\n                  <article\n                    key={article.url}\n                    data-url={article.url}\n                    onClick={this.onClickArticle}\n                  >\n                    <span>{article.title}</span>\n                    <span className=\"age\">{age} &bull; {this.getDomain(article.url)}</span>\n                  </article>\n                )\n              })}\n            </Grid.Column>\n            <Grid.Column id=\"right-pane\">\n              <div>\n                {this.state.article.image ?\n                  <div\n                    className=\"img\"\n                    style={{\n                      backgroundImage: `url(\"${this.state.article.image}\")`\n                    }}\n                  /> : ''}\n                <h2>{this.state.article.title}</h2>\n                <p>{format(this.state.article.publishedAt, 'eeee, MMMM do yyyy')}</p>\n                <p className=\"description\">{this.state.article.description}</p>\n                <p>\n                  {this.getDomain(this.state.article.url)}\n                </p>\n                <p>\n                  <Button\n                    size=\"huge\"\n                    data-url={this.state.article.url}\n                    color=\"black\"\n                    onClick={this.goToStory}\n                  >Read more</Button>\n                </p>\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </main>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport Idiot from 'idiot'\n\nconst idiot = new Idiot({\n  baseUrl: 'https://api.hotwallet.com'\n})\n\nidiot.get('/news')\n  .then(news => {\n    ReactDOM.render(<App news={news} />, document.getElementById('root'))\n  })\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}